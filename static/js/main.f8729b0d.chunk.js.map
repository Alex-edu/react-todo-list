{"version":3,"sources":["components/todoInput.js","components/header.js","components/todoElem.js","components/footer.js","components/mainSection.js","App.js","serviceWorker.js","index.js"],"names":["TodoTextInput","state","text","props","handleSubmit","e","target","value","trim","which","onSave","newTodo","setState","handleChange","handleBlur","className","classnames","edit","this","editing","type","placeholder","autoFocus","onBlur","onChange","onKeyDown","Component","Header","addTodo","length","TodoItem","handleDoubleClick","handleSave","id","deleteTodo","editTodo","element","todo","completeTodo","checked","completed","onDoubleClick","onClick","FILTER_TITLES","SHOW_ALL","SHOW_ACTIVE","SHOW_COMPLETED","Footer","activeCount","itemWord","filter","title","selectedFilter","onShow","selected","style","cursor","completedCount","onClearCompleted","map","key","renderFilterLink","renderTodoCount","renderFilterList","renderClearButton","TODO_FILTERS","MainSection","handleClearCompleted","actions","clearCompleted","handleShow","todos","completeAll","bind","filteredTodos","reduce","count","renderToggleAll","renderFooter","initialState","App","maxId","Math","max","areAllMarked","every","gameID","player","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f8729b0d.chunk.js","sourcesContent":["import React, {Component, PropTypes} from 'react'\r\nimport classnames from 'classnames'\r\n\r\nexport default class TodoTextInput extends Component {\r\n  static propTypes = {\r\n    onSave: PropTypes.func.isRequired,\r\n    text: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    editing: PropTypes.bool,\r\n    newTodo: PropTypes.bool\r\n  }\r\n\r\n  state = {\r\n    text: this.props.text || ''\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    const text = e.target.value.trim()\r\n    if (e.which === 13) {\r\n      this.props.onSave(text)\r\n      if (this.props.newTodo) {\r\n        this.setState({text: ''})\r\n      }\r\n    }\r\n  }\r\n\r\n  handleChange = e => this.setState({text: e.target.value})\r\n\r\n  handleBlur = e => {\r\n    if (!this.props.newTodo) {\r\n      this.props.onSave(e.target.value)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <input className={\r\n        classnames({\r\n          edit: this.props.editing,\r\n          'new-todo': this.props.newTodo\r\n        })}\r\n        type=\"text\"\r\n        placeholder={this.props.placeholder}\r\n        autoFocus=\"true\"\r\n        value={this.state.text}\r\n        onBlur={this.handleBlur}\r\n        onChange={this.handleChange}\r\n        onKeyDown={this.handleSubmit} />\r\n    )\r\n  }\r\n}\r\n","import React, {PropTypes} from 'react'\r\nimport TodoTextInput from './todoInput'\r\n\r\nconst Header = ({addTodo}) => {\r\n\r\n  const handleSave = text => {\r\n    if (text.length !== 0) {\r\n      addTodo(text)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>Easy todo</h1>\r\n      <TodoTextInput\r\n        newTodo\r\n        onSave={handleSave}\r\n        placeholder=\"What's next?\"\r\n      />\r\n    </header>\r\n  )\r\n}\r\n\r\nHeader.propTypes = {\r\n  addTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Header\r\n","import React, {Component, PropTypes} from 'react'\r\nimport classnames from 'classnames'\r\nimport TodoTextInput from './todoInput'\r\n\r\nexport default class TodoItem extends Component {\r\n  static propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    editTodo: PropTypes.func.isRequired,\r\n    deleteTodo: PropTypes.func.isRequired,\r\n    completeTodo: PropTypes.func.isRequired\r\n  }\r\n\r\n  state = {\r\n    editing: false\r\n  }\r\n\r\n  handleDoubleClick = () => {\r\n    this.setState({ editing: true })\r\n  }\r\n\r\n  handleSave = (id, text) => {\r\n    if (text.length === 0) {\r\n      this.props.deleteTodo(id)\r\n    } else {\r\n      this.props.editTodo(id, text)\r\n    }\r\n    this.setState({ editing: false })\r\n  }\r\n\r\n  render() {\r\n    const {todo, completeTodo, deleteTodo} = this.props\r\n\r\n    let element\r\n    if (this.state.editing) {\r\n      element = (\r\n        <TodoTextInput\r\n          text={todo.text}\r\n          editing={this.state.editing}\r\n          onSave={(text) => this.handleSave(todo.id, text)}\r\n        />\r\n      )\r\n    } else {\r\n      element = (\r\n        <div className=\"view\">\r\n          <input\r\n            className=\"toggle\"\r\n            type=\"checkbox\"\r\n            checked={todo.completed}\r\n            onChange={() => completeTodo(todo.id)}\r\n          />\r\n          <label onDoubleClick={this.handleDoubleClick}>{todo.text}</label>\r\n          <button className=\"destroy\" onClick={() => deleteTodo(todo.id)} />\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <li className={classnames({\r\n        completed: todo.completed,\r\n        editing: this.state.editing\r\n      })}>\r\n        {element}\r\n      </li>\r\n    )\r\n  }\r\n}\r\n","import React, {PropTypes, Component} from 'react'\r\nimport classnames from 'classnames'\r\n\r\nconst FILTER_TITLES = {\r\n  SHOW_ALL: 'All',\r\n  SHOW_ACTIVE: 'Active',\r\n  SHOW_COMPLETED: 'Completed'\r\n}\r\n\r\nexport default class Footer extends Component {\r\n  static propTypes = {\r\n    completedCount: PropTypes.number.isRequired,\r\n    activeCount: PropTypes.number.isRequired,\r\n    filter: PropTypes.string.isRequired,\r\n    onClearCompleted: PropTypes.func.isRequired,\r\n    onShow: PropTypes.func.isRequired\r\n  }\r\n\r\n  renderTodoCount() {\r\n    const {activeCount} = this.props\r\n\r\n    const itemWord = activeCount === 1 ? 'item' : 'items'\r\n\r\n    return (\r\n      <span className=\"todo-count\">\r\n        <strong>{activeCount || 'No '}</strong>\r\n        {itemWord} left\r\n      </span>\r\n    )\r\n  }\r\n\r\n  renderFilterLink(filter) {\r\n    const title = FILTER_TITLES[filter]\r\n    const {filter: selectedFilter, onShow} = this.props\r\n\r\n    return (\r\n      <button\r\n        className={classnames({ selected: filter === selectedFilter })}\r\n        style={{cursor: 'pointer' }}\r\n        onClick={() => onShow(filter)}>\r\n        {title}\r\n      </button>\r\n    )\r\n  }\r\n\r\n  renderClearButton() {\r\n    const {completedCount, onClearCompleted} = this.props\r\n    if (completedCount > 0) {\r\n      return (\r\n        <button className=\"clear-completed\" onClick={onClearCompleted} >\r\n          Clear completed\r\n        </button>\r\n      )\r\n    }\r\n  }\r\n\r\n  renderFilterList() {\r\n    return ['SHOW_ALL', 'SHOW_ACTIVE', 'SHOW_COMPLETED']\r\n      .map(filter =>\r\n        <li key={filter}>\r\n          {this.renderFilterLink(filter)}\r\n        </li>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <footer className=\"footer\">\r\n\r\n        {this.renderTodoCount()}\r\n\r\n        <ul className=\"filters\">\r\n          {this.renderFilterList()}\r\n        </ul>\r\n\r\n        {this.renderClearButton()}\r\n\r\n      </footer>\r\n    )\r\n  }\r\n}\r\n","import React, {Component, PropTypes} from 'react'\r\nimport TodoItem from './todoElem'\r\nimport Footer from './footer'\r\n\r\n const TODO_FILTERS = {\r\n   SHOW_ALL: () => true,\r\n   SHOW_ACTIVE: todo => !todo.completed,\r\n   SHOW_COMPLETED: todo => todo.completed\r\n }\r\n\r\n export default class MainSection extends Component {\r\n   static propTypes = {\r\n     todos: PropTypes.array.isRequired,\r\n     actions: PropTypes.object.isRequired\r\n   }\r\n\r\n   state = { filter: 'SHOW_ALL' }\r\n\r\n   handleClearCompleted = () => {\r\n     this.props.actions.clearCompleted()\r\n   }\r\n\r\n   handleShow = filter => {\r\n     this.setState({ filter })\r\n   }\r\n\r\n   renderToggleAll(completedCount) {\r\n     const { todos, actions } = this.props\r\n     if (todos.length > 0) {\r\n       return (\r\n         <input\r\n           className=\"toggle-all\"\r\n           type=\"checkbox\"\r\n           checked={completedCount === todos.length}\r\n           onChange={actions.completeAll}\r\n         />\r\n       )\r\n     }\r\n   }\r\n\r\n   renderFooter(completedCount) {\r\n     const { todos } = this.props\r\n     const { filter } = this.state\r\n     const activeCount = todos.length - completedCount\r\n\r\n     if (todos.length) {\r\n       return (\r\n         <Footer\r\n           completedCount={completedCount}\r\n           activeCount={activeCount}\r\n           filter={filter}\r\n           onClearCompleted={this.handleClearCompleted.bind(this)}\r\n           onShow={this.handleShow.bind(this)} />\r\n       )\r\n     }\r\n   }\r\n\r\n   render() {\r\n     const { todos, actions } = this.props\r\n     const { filter } = this.state\r\n\r\n     const filteredTodos = todos.filter(TODO_FILTERS[filter])\r\n     const completedCount = todos.reduce((count, todo) => {\r\n       return todo.completed ? count + 1 : count\r\n     }, 0)\r\n\r\n     return (\r\n       <section className=\"main\">\r\n         {this.renderToggleAll(completedCount)}\r\n         <ul className=\"todo-list\">\r\n           {filteredTodos.map(todo =>\r\n             <TodoItem key={todo.id} todo={todo} {...actions} />\r\n           )}\r\n         </ul>\r\n         {this.renderFooter(completedCount)}\r\n       </section>\r\n     )\r\n   }\r\n }\r\n","import React, {Component} from 'react'\r\nimport Header from './components/header'\r\nimport MainSection from './components/mainSection'\r\n\r\nconst initialState = [\r\n]\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      todos: initialState,\r\n      gameID: null,\r\n      player: 0\r\n    }\r\n  }\r\n\r\n  addTodo = (text) => {\r\n    const todos = [\r\n      {\r\n        id: this.state.todos.reduce((maxId, todo) => Math.max(todo.id, maxId), -1) + 1,\r\n        completed: false,\r\n        text: text\r\n      },\r\n      ...this.state.todos\r\n    ]\r\n    this.setState({todos});\r\n  }\r\n\r\n  deleteTodo = (id) => {\r\n    const todos = this.state.todos.filter(todo => todo.id !== id)\r\n    this.setState({todos});\r\n  }\r\n\r\n  editTodo = (id, text) => {\r\n    const todos = this.state.todos.map(todo =>\r\n      todo.id === id ? {...todo, text} : todo\r\n    )\r\n    this.setState({todos})\r\n  }\r\n\r\n  completeTodo = (id) => {\r\n    const todos = this.state.todos.map(todo =>\r\n      todo.id === id ? {...todo, completed: !todo.completed} : todo\r\n    )\r\n    this.setState({todos})\r\n  }\r\n\r\n  completeAll = () => {\r\n    const areAllMarked = this.state.todos.every(todo => todo.completed)\r\n    const todos = this.state.todos.map(todo => {\r\n      return {...todo, completed: !areAllMarked}\r\n    })\r\n    this.setState({todos})\r\n  }\r\n\r\n  clearCompleted = () => {\r\n    const todos = this.state.todos.filter(todo => todo.completed === false)\r\n    this.setState({todos})\r\n  }\r\n\r\n  actions = {\r\n    addTodo: this.addTodo,\r\n    deleteTodo: this.deleteTodo,\r\n    editTodo: this.editTodo,\r\n    completeTodo: this.completeTodo,\r\n    completeAll: this.completeAll,\r\n    clearCompleted: this.clearCompleted\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <Header addTodo={this.actions.addTodo} />\r\n        <MainSection todos={this.state.todos} actions={this.actions} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './base.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}